{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}
forall X -> int is_null (X x) asm "ISNULL";

() recv_internal() {
}


(cell) change_cell(int shift, slice s) impure {
    cell s1 = null();
    if (~ s.slice_refs_empty?()) {
        s1 = s~load_ref();
    }

    var (_, s_bits, _) = s.slice_compute_data_size(1);
    builder cur_builder = begin_cell();
    int full_ints = s_bits / 8;
    int cur_place = 248;
    int places_left_builder = 4;
    int int_to_store = 0;
    int cur_int = 0;

    repeat(full_ints) { 
        cur_int = s~load_uint(8);
        if ((cur_int > 64) & (cur_int < 91)) {
            cur_int = (cur_int - 65 + shift) % 26 + 65;
        }
        elseif ((cur_int > 96) & (cur_int < 123)) {
            cur_int = (cur_int - 97 + shift) % 26 + 97;
        }
        if (cur_place < 0) {
            cur_builder~store_uint(int_to_store, 256);
            int_to_store = 0;
            places_left_builder -= 1;
            if (places_left_builder == 1) {
                cur_place = 240;
            }
            else {
                cur_place = 248;
            }
        }
        int_to_store |= (cur_int << cur_place);
        cur_place -= 8;
    }

    if (int_to_store != 0) {
        if (places_left_builder == 1) {
            cur_builder~store_uint(int_to_store >> (cur_place + 8), 240 - cur_place);
        }
        else {
            cur_builder~store_uint(int_to_store >> (cur_place + 8), 248 - cur_place);
        }
    }

    if (s1.is_null()){
        return cur_builder.end_cell();
    }

    return cur_builder.store_ref(change_cell(shift, s1.begin_parse())).end_cell();
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    shift %= 26;
    slice s = text.begin_parse();
    s~load_uint(32);
    return begin_cell().store_uint(0, 32).store_ref(change_cell(shift, s)).end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    shift %= 26;
    slice s = text.begin_parse();
    s~load_uint(32);
    return begin_cell().store_uint(0, 32).store_ref(change_cell(- shift, s)).end_cell();
}