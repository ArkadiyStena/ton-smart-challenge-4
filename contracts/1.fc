forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
forall X -> (tuple) to_tuple (X x) asm "NOP";

() recv_internal() {
}

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id {    
    if (cell_hash(tree) == hash) {
        return tree;
    }
    tuple stack = to_tuple([tree, ]);
    while (~ stack.is_null()) {
        cell c = stack~pop_back();
        if (hash == cell_hash(c)) {
            return c;
        }

        slice s = c.begin_parse();
        repeat (s.slice_refs()) {
            stack~push_back(s~load_ref());
        }
    }
    return begin_cell().end_cell();
}
